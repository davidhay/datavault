pipeline {
    agent {
      dockerfile {
        dir 'dv5/jenkins'
        filename 'Dockerfile.jenkins'
                additionalBuildArgs '--build-arg JENKINS_UID=$(id -u) --build-arg JENKINS_GID=$(id -g) --build-arg DOCKER_GID=$(getent group docker | cut -d: -f3)'
        args  '--group-add=docker -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/jenkins/.m2:/home/jenkins/.m2 -e JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8'
      }
    }
    stages {
        stage('Test Docker Socket') {
            steps {
                echo 'Testing Docker Socket'
                sh 'curl --silent -XGET --unix-socket /var/run/docker.sock http://localhost/info | jq'
            }
        }
        stage('Compile') {
            steps {
                echo 'Compiling..'
                sh './mvnw clean compile'
            }
        }
        stage('Unit Tests') {
            steps {
                echo 'Unit Tests..'
            }
        }
        stage('Integration Tests') {
            steps {
                echo 'Integration Tests..'
            }
        }
        stage('Install') {
            steps {
                echo 'installing locally'
                sh './mvnw install -Dskip.unit.tests -Dskip.integration.tests -Dmaven.main.skip'
            }
        }
        stage('Approval') {
            steps {
                echo "DEPLOYED-1 ? ${DEPLOY:false}"
                timeout(time:5, unit:'HOURS') {
                    input message: 'ReDeploy to Jenkins16 ?', ok: 'Deploy!'
                }
            }
        }
        stage("INIT - CHECK TARGET IS UP") {
            steps {
                script {
                    def pingRes = sh(script:"ping -c 1 $TARGET > /dev/null 2>&1", returnStatus: true);
                    if ( pingRes != 0) {
                        throw new Exception("Failed to ping $TARGET");
                    }
                }
            }
        }
        stage('CopyToTarget') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'jenkinsKeyPairWithEC2USER', keyFileVariable: 'KEYFILE', usernameVariable:"USERNAME")]) {
                    sh  """
                    set +x
                    echo "KEYFILE IS $KEYFILE"
                    echo "USERNAME IS $USERNAME"
                    scp -i $KEYFILE -o StrictHostKeyChecking=no datavault-webapp/target/datavault-webapp.jar $USERNAME@$TARGET:./
                    scp -i $KEYFILE -o StrictHostKeyChecking=no datavault-worker/target/datavault-worker.jar $USERNAME@$TARGET:./
                    scp -i $KEYFILE -o StrictHostKeyChecking=no datavault-broker/target/datavault-broker.jar $USERNAME@$TARGET:./
                """
                }
            }
        }//end stage
    }
    post {
        always {
          junit allowEmptyResults:true, testResults: '**/surefire-reports/*.xml'
          publishCoverage adapters: [jacoco(mergeToOneReport: true, path: '**/jacoco.xml')]
        }
        success {
            echo "BUILD SUCCESS : Recording Artifacts.."
            archiveArtifacts artifacts: 'datavault-webapp/target/datavault-webapp.jar, datavault-worker/target/datavault-worker.jar, datavault-broker/target/datavault-broker.jar', fingerprint: true
        }
    }
}
